[{"content":"簡介 此篇文章主要使用 Command 的方式來操作，會先介紹一下會使用到的各個 Command 使用方法與功用，再介紹三種可以跨 Repository 取得 Commit 或 Merge Request (or Pull Request) 的方式。\nCommand 介紹 這邊預設對 Git 有一定的基礎 (clone、pull、push、log\u0026hellip;)，故僅介紹此篇主要使用的相關 Command。\nremote Remote 為管理遠端 Repository 的功能，並可對每個連結的 Repository 設定名稱。\n預設在 git clone 之後，會有一個預設的 origin 名稱，這是 git 給的預設名稱。\n可以使用 git remote 查看目前有設定的 remote。\n$ git clone git@github.com:yuuuna/main-project.git Cloning into \u0026#39;main-project\u0026#39;... remote: Enumerating objects: 3, done. remote: Counting objects: 100% (3/3), done. remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 Receiving objects: 100% (3/3), done. $ cd main-project $ git remote origin 使用 git remote -v 可以查看名稱 + Repository Url。\n$ git remote -v origin\tgit@github.com:yuuuna/main-project.git (fetch) origin\tgit@github.com:yuuuna/main-project.git (push) 使用 git remote add \u0026lt;名稱\u0026gt; \u0026lt;git repo url\u0026gt; 新增連結的遠端 Repository。\n$ git remote add sub git@github.com:yuuuna/sub-project.git 可以檢查一下剛剛新增的 remote，確認關聯成功！\n$ git remote origin sub $ git remote -v origin\tgit@github.com:yuuuna/main-project.git (fetch) origin\tgit@github.com:yuuuna/main-project.git (push) sub\tgit@github.com:yuuuna/sub-project.git (fetch) sub\tgit@github.com:yuuuna/sub-project.git (push) 目前設定了一個 sub 的遠端，但是可以發現目前沒有抓取此 Repo 的任何資訊，使用 git log 可觀察到目前還不認識 sub 裡面 master 這個分支。\n$ git log sub/master fatal: ambiguous argument \u0026#39;sub/master\u0026#39;: unknown revision or path not in the working tree. Use \u0026#39;--\u0026#39; to separate paths from revisions, like this: \u0026#39;git \u0026lt;command\u0026gt; [\u0026lt;revision\u0026gt;...] -- [\u0026lt;file\u0026gt;...]\u0026#39; 那接下來進入下個章節 fetch 學習抓取 sub 這個遠端的資訊。\nfetch Fetch 可以抓取遠端資訊，把目前還沒載下來的資訊都抓下來。\n現在我們把上一個指令中新增的 sub Repository 下載下來。\n$ git fetch sub remote: Enumerating objects: 6, done. remote: Counting objects: 100% (6/6), done. remote: Compressing objects: 100% (3/3), done. remote: Total 6 (delta 0), reused 3 (delta 0), pack-reused 0 Unpacking objects: 100% (6/6), 832 bytes | 166.00 KiB/s, done. From github.com:yuuuna/sub-project * [new branch] master -\u0026gt; sub/master 可以驗證一下，現在下載完成了，再試一下 git log，可以查看到 sub 的 master 分支 commit 內容囉！\n$ git log sub/master commit 19f7e1c17d4635733c96e1d512a3e5da2cbf2161 (sub/master) Author: Yuuna \u0026lt;k9532121@gmail.com\u0026gt; Date: Sun May 30 15:21:11 2021 +0800 Initial commit (END) cherry pick cherry-pick 的功能是「撿分支」，假如你目前的分支只想要其他分支的某幾個 Commit，那就很適合使用 cherry-pick 這個功能。\n使用方法為：git cherry-pick \u0026lt;commit SHA\u0026gt;\n目前專案分支如下，有兩條分支 master、create-menu。 那現在想要將 create-menu 的 91ccde(Create menu txt.) 紀錄放到 master 分支上，\n但不希望 056791(Update menu txt.) 也併到 master 上，\n那這個情境就很適合使用 cherry-pick 這個方法。\n僅要將目前的分支先切到 master，然後使用 cherry-pick 想要的紀錄(91ccde)，即可完成囉！\n$ git cherry-pick 91ccde [master 6550d7d] Create menu txt. Date: Sun May 30 17:03:46 2021 +0800 1 file changed, 2 insertions(+) create mode 100644 menu.txt 再觀察一下線圖，可以看到 Commit 紀錄也存在於 master 的分支上囉～ PS. 若是只想要這個 Commit 的修改紀錄，但是不要有 Commit 的送出紀錄，可以加上 --no-commit，那僅會將調整紀錄放至暫存區。\n$ git cherry-pick 91ccde --no-commit $ git status On branch master Your branch is behind \u0026#39;origin/master\u0026#39; by 1 commit, and can be fast-forwarded. (use \u0026#34;git pull\u0026#34; to update your local branch) Changes to be committed: (use \u0026#34;git restore --staged \u0026lt;file\u0026gt;...\u0026#34; to unstage) new file: menu.txt diff Diff 為比對檔案的修改紀錄，可以比對當前修改的有哪些、或是哪些 commit 區間的修改紀錄，接下來介紹幾個比較常用的方法。\n git diff：比對當前的修改紀錄，此比對是在執行 git add 之前的檔案。 git diff --cached：這個比對的時機點是 git add 之後，git commit 之前，適用於執行 commit 之前做的檢查！ git diff \u0026lt;commit SHA\u0026gt;：這個會比對填入的 commit SHA ~ 當前工作目錄區間的修改紀錄。若想要看上一個 Commit 的紀錄，可以使用 git diff HEAD^。 git diff \u0026lt;start commit SHA\u0026gt; \u0026lt;finish commit SHA\u0026gt;：這個就是比對兩個 commit 區間的修改紀錄囉。  簡單對一個檔案進行了調整，使用 git diff 呈現如下：\ndiff --git a/index.txt b/index.txt index 102db4a..853827d 100644 --- a/index.txt +++ b/index.txt @@ -1 +1,3 @@  Add txt + +Update txt (END)  這個應該蠻好懂的，大部分可能會使用 IDE 來幫助我們去看修改紀錄，不過這個指令搭配 apply 其實就可以幫助我們匯入此次調整紀錄！\napply Apply 對一般使用 git 的人應該會比較陌生，Apply 的功能簡單講的話，就是同意一個 Diff 檔案的修改紀錄，而這個 Diff 檔案就是由 git diff 來產生。\n那同意一個 Diff 檔案是什麼意思？\n他會將這個 Diff 檔案的修改紀錄，都放到暫存區裡面。\n說這麼多可能還是很模糊，直接來看實作比較好暸解！\n這是 Diff 檔案的樣子，其實就是 git diff 後的結果XD diff --git a/index.txt b/index.txt new file mode 100644 index 0000000..102db4a --- /dev/null +++ b/index.txt @@ -0,0 +1 @@ +Add txt \n那要把這個 Diff 放到暫存區，只要執行 git apply \u0026lt;diff file\u0026gt; 即可。\n# diff 的檔案名稱為 add.diff $ git apply add.diff # 完成 apply 了，使用 status 檢查一下，確認已經進入暫存區了 $ git status On branch master Your branch is up to date with \u0026#39;origin/master\u0026#39;. Untracked files: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to include in what will be committed) index.txt nothing added to commit but untracked files present (use \u0026#34;git add\u0026#34; to track) format patch 在 GitHub 或是 GitLab 上，其實都可以直接產出 format-patch 這個功能後的檔案，\n這個檔案內容是使用 email 的格式，範例如下：\nFrom a61120f0a011bbd51688808e8ba91f2af39dbcd4 Mon Sep 17 00:00:00 2001 From: Yuuna \u0026lt;k9532121@gmail.com\u0026gt; Date: Sun, 30 May 2021 17:02:01 +0800 Subject: [PATCH] Add index.txt ---  index.txt | 1 + 1 file changed, 1 insertion(+) create mode 100644 index.txt diff --git a/index.txt b/index.txt new file mode 100644 index 0000000..102db4a --- /dev/null +++ b/index.txt @@ -0,0 +1 @@ +Add txt  am 實作：取得跨 Repository 取得紀錄 這邊將運用上面 Command 的介紹，組合出三種不同的方法，並可依照不同的情境來選擇方法。\n方法一：remote + cherry pick 這個方法最好懂，也最適合新手，方法就是去撿想要的 Commit 紀錄過來。\n流程如下：\n 使用 git remote 遠端想要的 Repository 使用 git fetch 剛剛設定的 Remote 使用 git cherry-pick 把想要的分支撿過來，就完成囉！  那現在以案例來實作，目前有兩專案 main-project、sub-project，而 commit 紀錄如下圖：  main-project   sub-project \n目前想要在 main-project 的 master 分支新增 sub-project 的 a61120 Commit 紀錄，\n操作如下：\n# 1. Remote 需要的 Repository $ git clone git@github.com:yuuuna/main-project.git # 2. Fetch 剛剛 Remote 的遠端資訊下來 $ git fetch sub # [驗證] 可以看想要的 commit SHA $ git log sub/master # 3. cherry-pick 需要的分支過來 $ git cherry-pick a61120f0a011bbd51688808e8ba91f2af39dbcd4 # 推送遠端，完成！ $ git push 觀察 git graph，有成功將 Commit 紀錄新增在 main-project 的 master 中了。\n方法二：diff + apply 若你是熟悉 Git 的使用，那這個方法你只要暸解了 Diff 與 Apply 的功能，可以知道其實也不會太難，輕鬆兩個指令就可以完成，也比起 cherry-pick 的方法精簡一些。\n流程如下：\n 使用 git diff \u0026lt;commit 1\u0026gt; \u0026lt;commit 2\u0026gt; \u0026gt; update.diff 將調整紀錄輸出成一個檔案，這裡名稱為 update.diff 到我要匯入的專案裡面，使用 git apply update.diff，就會把修改紀錄會進去暫存區了！  那現在以案例來實作，目前有兩專案 main-project、sub-project，而 commit 紀錄如下圖：  main-project   sub-project \n目前想要在 main-project 的 master 分支新增 sub-project 的 a61120 Commit 紀錄，\n操作如下：\n  先到 sub-project 專案目錄下： # 產生 Diff 檔案，需要的是 19f7e1 與 a61120 區間的修改紀錄 $ git diff 19f7e1 a61120 \u0026gt; update.diff\n  把 update.diff 放至 main-project 裡面，方便下個步驟直接使用\n  切到 main-project 專案目錄下： # 使用 apply 將 update.diff 匯入至暫存區 $ git apply update.diff\n  這樣就完成囉！\n只是這個方法是將調整紀錄放進暫存區，所以後續還要自己進行 Commit 的動作，才能 Push 呦\n那可以看接下來第三個方法，也是我最推薦最方便快速的！\n方法三：format patch + am ","date":"2021-05-30T00:00:00Z","permalink":"https://blog.yuuna.dev/p/git-%E8%B7%A8-repo-%E5%8F%96%E5%BE%97-commit-%E6%88%96-mr-%E8%B3%87%E6%96%99/","title":"[GIT] 跨 Repo 取得 commit 或 MR 資料"},{"content":"Jasypt 介紹 Jasypt 為 Java 的套件，提供開發人員用簡單的方法將加解密功能加入專案裡，而開發人員也不需要對密碼學有深入的理解。\n特點  單向與雙向加密的安全性，使用標準的加密技術。 提供了 DIGEST 演算法與 PBE(Password-Based Encryption) 演算法，Ex. MD5、SHA、SHA512、PBEWithMD5AndDES\u0026hellip;。 提高使用者密碼的安全性。 於 Spring 簡單使用加解密技術。 更多其他特點\u0026hellip;  使用 Jasypt CLI Tools 加解密資料 要使用 Jasypt CLI Tools 需先於網站中下載檔案：Download\n演算法的選擇 ​使用 bin/listAlgorithms.sh 查看可使用的演算法清單。\n$ sh ./listAlgorithms.sh DIGEST ALGORITHMS: [MD2, MD5, SHA, SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, SHA-512/256] PBE ALGORITHMS: [PBEWITHHMACSHA1ANDAES_128, PBEWITHHMACSHA1ANDAES_256, PBEWITHHMACSHA224ANDAES_128, PBEWITHHMACSHA224ANDAES_256, PBEWITHHMACSHA256ANDAES_128, PBEWITHHMACSHA256ANDAES_256, PBEWITHHMACSHA384ANDAES_128, PBEWITHHMACSHA384ANDAES_256, PBEWITHHMACSHA512ANDAES_128, PBEWITHHMACSHA512ANDAES_256, PBEWITHMD5ANDDES, PBEWITHMD5ANDTRIPLEDES, PBEWITHSHA1ANDDESEDE, PBEWITHSHA1ANDRC2_128, PBEWITHSHA1ANDRC2_40, PBEWITHSHA1ANDRC4_128, PBEWITHSHA1ANDRC4_40]  加密 使用 bin/encrypt.sh 來進行加密，執行此檔案可看到應填入的欄位有哪些。\n$ sh ./encrypt.sh USAGE: encrypt.sh [ARGUMENTS] * Arguments must apply to format: \u0026#34;arg1=value1 arg2=value2 arg3=value3 ...\u0026#34; * Required arguments: input password * Optional arguments: verbose algorithm keyObtentionIterations saltGeneratorClassName providerName providerClassName stringOutputType ivGeneratorClassName ​可觀察到必要填入有 input 與 password 兩個欄位。\n input 為要加密的文字。 password 為加解密使用的 Key。 ​​​​[可選] algorithm 為使用哪種演算法來加密。  那現在以 input 為 password123，password 為 CAT，而演算法選擇 PBEWithMD5AndDES 來進行加密。\n$ sh ./encrypt.sh input=password123 password=CAT algorithm=PBEWithMD5AndDES ----ENVIRONMENT----------------- Runtime: Azul Systems, Inc. OpenJDK 64-Bit Server VM 25.172-b01 ----ARGUMENTS------------------- algorithm: PBEWithMD5AndDES input: password123 password: CAT ----OUTPUT---------------------- 31wLpRHWtqh0XQOSLgLBLo2Rt2wDz4zj 這樣就完成了加密，而加密過後的密碼為 31wLpRHWtqh0XQOSLgLBLo2Rt2wDz4zj，網站中就可以使用這組已加密的密碼。\n解密 可使用 bin/decrypt.sh 進行解密，執行此檔案可看到應填入的欄位有哪些，基本上與加密相同。\n$ sh ./decrypt.sh USAGE: decrypt.sh [ARGUMENTS] * Arguments must apply to format: \u0026#34;arg1=value1 arg2=value2 arg3=value3 ...\u0026#34; * Required arguments: input password * Optional arguments: verbose algorithm keyObtentionIterations saltGeneratorClassName providerName providerClassName stringOutputType ivGeneratorClassName 那現在將剛剛加密過後的密碼進行解密，input 為 31wLpRHWtqh0XQOSLgLBLo2Rt2wDz4zj，password 為 CAT，演算法為 PBEWithMD5AndDES。\n$ sh ./decrypt.sh input=31wLpRHWtqh0XQOSLgLBLo2Rt2wDz4zj password=CAT algorithm=PBEWithMD5AndDES ----ENVIRONMENT----------------- Runtime: Azul Systems, Inc. OpenJDK 64-Bit Server VM 25.172-b01 ----ARGUMENTS------------------- algorithm: PBEWithMD5AndDES input: 31wLpRHWtqh0XQOSLgLBLo2Rt2wDz4zj password: CAT ----OUTPUT---------------------- password123 ​輸出結果得到 password123，成功進行解密。\nSpring Framework 使用 Jasypt 套件 匯入 Jasypt 套件 於 pom.xml 新增套件，\n套件版本的選擇若為 Sprint 3.0 或 3.1 使用 jasypt-spring31 版本，\n若為 Sprint 4.0 使用 jasypt-spring4 版本，本文以使用 4.0 版本。\n其他版本可於網站中尋找：網站\n1 2 3 4 5 6 7 8 9 10  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.jasypt\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jasypt\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.9.3\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.jasypt\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jasypt-spring4\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.9.3\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;   調整 Spring 配置 設定環境變數與套件相關配置。\n這邊設定 Key 的方法有兩種，\n第一種是直接寫在設定檔案裡，name 設定 password，value 給予 Key，\n第二種是設定在 Server 的環境變數裡，name 設定 passwordEnvName，value 給予環境變數名稱。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  \u0026lt;!-- 設定環境變數 --\u0026gt; \u0026lt;bean id=\u0026#34;environmentVariablesConfiguration\u0026#34; class=\u0026#34;org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;algorithm\u0026#34; value=\u0026#34;PBEWithMD5AndDES\u0026#34; /\u0026gt; \u0026lt;!-- 方法一：將 key 直接設定在這裡 --\u0026gt; \u0026lt;property name=\u0026#34;password\u0026#34; value=\u0026#34;CAT\u0026#34; /\u0026gt; \u0026lt;!-- 方法二：將 key 設定在 Server 的環境變數 --\u0026gt; \u0026lt;property name=\u0026#34;passwordEnvName\u0026#34; value=\u0026#34;WEB_PASSWORD\u0026#34; /\u0026gt; \u0026lt;/bean\u0026gt; \u0026lt;!-- 解密配置值設定 --\u0026gt; \u0026lt;bean id=\u0026#34;configurationEncryptor\u0026#34; class=\u0026#34;org.jasypt.encryption.pbe.StandardPBEStringEncryptor\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;config\u0026#34; ref=\u0026#34;environmentVariablesConfiguration\u0026#34; /\u0026gt; \u0026lt;/bean\u0026gt; \u0026lt;!-- Spring Properties 設定 --\u0026gt; \u0026lt;bean class=\u0026#34;org.jasypt.spring4.properties.EncryptablePropertyPlaceholderConfigurer\u0026#34;\u0026gt; \u0026lt;constructor-arg ref=\u0026#34;configurationEncryptor\u0026#34; /\u0026gt; \u0026lt;property name=\u0026#34;locations\u0026#34;\u0026gt; \u0026lt;list\u0026gt; \u0026lt;value\u0026gt;classpath:web.properties\u0026lt;/value\u0026gt; \u0026lt;/list\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;/bean\u0026gt;    在 Spring Properties 設定中的 class 需要依照版本設定不同設定檔，\n而本文是使用 Spring 4.0，所以使用 org.jasypt.spring4.properties.EncryptablePropertyPlaceholderConfigurer，\n若為 Spring 3.1，則使用 org.jasypt.spring31.properties.EncryptablePropertyPlaceholderConfigurer，\n其他版本設定於網站中確認：網站\n 最後將 properties 檔案裡面需要加密的部分使用 ENC(\u0026lt;已加密的密碼\u0026gt;) 包起來，就大功告成啦！\n1 2  web.user = webuser web.password = ENC(31wLpRHWtqh0XQOSLgLBLo2Rt2wDz4zj)   Key 設定在環境變數 若將 Key 直接設定在 xml 裡，這樣假若系統程式被駭，Key 會直接也被取得的話根本功虧一簣， 這邊講解在配置中使用 passwordEnvName 來把 Key 設定在環境變數，伺服器應該怎麼做設定。\n設定環境變數其實不難，假若是設定 passwordEnvName = WEB_PASSWORD，環境變數設定為 WEB_PASSWORD， 那只要在 /\u0026lt;tomcat\u0026gt;/bin/setenv.sh 檔案中新增一行：\nexport WEB_PASSWORD=CAT 可能會覺得這樣不是只是換個地方放嗎，若伺服器檔案都被竊取了，這個環境變數也是會被知道的？ 對的\n但是​讀取環境變數僅會在伺服器啟動時讀取一次，所以可以啟動伺服器後將檔案移除，\n下次要再重啟時再將檔案放置回去，重啟完再移除檔案，\n雖然動作會較繁瑣，但可以確保密碼不被竊取。\n常見問題 加密時發生 java.lang.ExceptionInInitializerError 執行 encrypt.sh 時若發生 java.lang.ExceptionInInitializerError，原因可能為 JDK 版本過新，可參考此回答。\n$ sh ./encrypt.sh input=password123 password=CAT ----ENVIRONMENT----------------- Runtime: Oracle Corporation Java HotSpot(TM) 64-Bit Server VM 25.281-b09 ----ARGUMENTS------------------- input: password123 password: CAT ----ERROR----------------------- java.lang.ExceptionInInitializerError ​此時可確認一下本機是否有舊版 JDK 使用，使用以下指令查看，若沒有可去下載 JKD 8 261 版本(或更舊)。\n$ /usr/libexec/java_home -V Matching Java Virtual Machines (3): 1.8.281.09 (x86_64) \u0026#34;Oracle Corporation\u0026#34; - \u0026#34;Java\u0026#34; /Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home 1.8.0_172-zulu-8.30.0.1 (x86_64) \u0026#34;Azul Systems, Inc.\u0026#34; - \u0026#34;Zulu 8\u0026#34; /Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home /Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home 由上清單確認後，我有一個舊版本的 1.8.0_172-zulu-8.30.0.1 可使用，若想固定本機的 JAVA 版本可以設定在 ~/.bash_profile 裡面，但若只是執行此程式時需要使用此版本，可以在指令前方新增指定 JAVA 版本的設定。\n$ JAVA_HOME=`/usr/libexec/java_home -v 1.8.0_172-zulu-8.30.0.1` sh ./encrypt.sh input=password123 password=CAT ----ENVIRONMENT----------------- Runtime: Azul Systems, Inc. OpenJDK 64-Bit Server VM 25.172-b01 ----ARGUMENTS------------------- input: password123 password: CAT ----OUTPUT---------------------- U9zgvbxBMVbmn/JVKpIGbqHlnjIFglRJ ","date":"2021-03-14T00:00:00Z","image":"https://blog.yuuna.dev/p/spring-framework-%E4%BD%BF%E7%94%A8-jasypt-%E5%8A%A0%E5%AF%86-config-%E6%AA%94%E6%A1%88/image_hu44eacfb0b3a3eed3597ff8a4dedc19aa_84098_120x120_fill_q75_box_smart1.jpeg","permalink":"https://blog.yuuna.dev/p/spring-framework-%E4%BD%BF%E7%94%A8-jasypt-%E5%8A%A0%E5%AF%86-config-%E6%AA%94%E6%A1%88/","title":"Spring Framework 使用 Jasypt 加密 config 檔案"},{"content":"值得紀念的第一篇文章，所以紀錄一下方法\n本機安裝 Hugo $ brew install hugo 選擇主題 於 Theme 挑選一個自己喜歡的主題，記得注意 License 。\n建置專案 $ hugo new site \u0026lt;site-name\u0026gt; 主題有提供教學 然後可以依照選擇主題裡的教學方式繼續完成建置(如果他有提供教學的話)。\n主題未提供 至主題的 Git 將 Theme 下載下來，放進專案的 Theme 資料夾裡，以及確認 config.toml 或 config.yaml 的設定(當然主題有提供最好\u0026hellip;)。\n啟動專案 $ hugo serve 新增文章 我的專案是以資料夾在使用 index.md，也有其他主題可能不需要墊一層資料夾，直接以 .md 檔案，ex. how-to-use-css.md。\n$ hugo new post/\u0026lt;folder-name\u0026gt;/index.md 部署設定 若有要部署至 Github，須將 config.yaml 的 baseurl 調整為自己的網址\nbaseurl: https://yuuuna.github.io ","date":"2021-03-12T00:00:00Z","image":"https://blog.yuuna.dev/p/hugo-%E7%B4%80%E9%8C%84/image_hu3d03a01dcc18bc5be0e67db3d8d209a6_184743_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.yuuna.dev/p/hugo-%E7%B4%80%E9%8C%84/","title":"Hugo 紀錄"}]